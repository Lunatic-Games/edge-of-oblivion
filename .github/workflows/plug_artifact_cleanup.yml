name: Artifact Cleanup

on:
  workflow_call:
    inputs:
      name_contains:
        type: string
        required: true
      number_to_keep:
        type: number
        required: false
        default: 1
      dry_run:
        type: boolean
        required: false
        default: false

jobs:
  delete:
    name: Delete old artifacts
    runs-on: ubuntu-latest
    permissions: 
      actions: write
    steps:
      - name: Delete
        uses: actions/github-script@v6
        id: delete
        with:
          script: |
            const res = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const toDelete = res.data.artifacts
                            .filter(({ name }) => name.includes('${{ inputs.name_contains }}')) // Filter to our search criteria
                            .sort( (a,b) => (new Date(a.created_at)) - (new Date(b.created_at)) ) // Sort in descending order by CREATED_AT
                            .slice(0, -${{ inputs.number_to_keep }}); // Remove all but the last X
                            
            // If dry_run is set, don't actually delete them
            if ( !${{ inputs.dry_run }} ) {
              toDelete.forEach(({ id }) => {
                 github.rest.actions.deleteArtifact({
                   owner: context.repo.owner,
                   repo: context.repo.repo,
                   artifact_id: id,
                 })
                });
              }
              
              return toDelete;
            
      - name: Print deleted
        run: echo "${{ steps.delete.outputs.result }}"
